// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package test

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Test_Type int32

const (
	Test_TYPE_NONE  Test_Type = 0
	Test_TYPE_FIRST Test_Type = 1
)

var Test_Type_name = map[int32]string{
	0: "TYPE_NONE",
	1: "TYPE_FIRST",
}

var Test_Type_value = map[string]int32{
	"TYPE_NONE":  0,
	"TYPE_FIRST": 1,
}

func (x Test_Type) String() string {
	return proto.EnumName(Test_Type_name, int32(x))
}

func (Test_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0, 0}
}

type Inner_Type int32

const (
	Inner_TYPE_NONE  Inner_Type = 0
	Inner_TYPE_FIRST Inner_Type = 1
)

var Inner_Type_name = map[int32]string{
	0: "TYPE_NONE",
	1: "TYPE_FIRST",
}

var Inner_Type_value = map[string]int32{
	"TYPE_NONE":  0,
	"TYPE_FIRST": 1,
}

func (x Inner_Type) String() string {
	return proto.EnumName(Inner_Type_name, int32(x))
}

func (Inner_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1, 0}
}

type Test struct {
	At        time.Time `protobuf:"bytes,1,opt,name=at,proto3,stdtime" json:"at"`
	Type      Test_Type `protobuf:"varint,2,opt,name=type,proto3,enum=Test_Type" json:"type,omitempty"`
	Inner     *Inner    `protobuf:"bytes,3,opt,name=inner,proto3" json:"inner,omitempty"`
	CreatedAt time.Time `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}
func (m *Test) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(m, src)
}
func (m *Test) XXX_Size() int {
	return m.Size()
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

func (m *Test) GetAt() time.Time {
	if m != nil {
		return m.At
	}
	return time.Time{}
}

func (m *Test) GetType() Test_Type {
	if m != nil {
		return m.Type
	}
	return Test_TYPE_NONE
}

func (m *Test) GetInner() *Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (m *Test) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type Inner struct {
	At   time.Time  `protobuf:"bytes,1,opt,name=at,proto3,stdtime" json:"at"`
	Type Inner_Type `protobuf:"varint,2,opt,name=type,proto3,enum=Inner_Type" json:"type,omitempty"`
}

func (m *Inner) Reset()         { *m = Inner{} }
func (m *Inner) String() string { return proto.CompactTextString(m) }
func (*Inner) ProtoMessage()    {}
func (*Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}
func (m *Inner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inner.Merge(m, src)
}
func (m *Inner) XXX_Size() int {
	return m.Size()
}
func (m *Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_Inner proto.InternalMessageInfo

func (m *Inner) GetAt() time.Time {
	if m != nil {
		return m.At
	}
	return time.Time{}
}

func (m *Inner) GetType() Inner_Type {
	if m != nil {
		return m.Type
	}
	return Inner_TYPE_NONE
}

func init() {
	proto.RegisterEnum("Test_Type", Test_Type_name, Test_Type_value)
	proto.RegisterEnum("Inner_Type", Inner_Type_name, Inner_Type_value)
	proto.RegisterType((*Test)(nil), "Test")
	proto.RegisterType((*Inner)(nil), "Inner")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x4f, 0xc1, 0x4a, 0xc3, 0x40,
	0x14, 0xcc, 0xab, 0x69, 0xb1, 0xaf, 0x58, 0xca, 0x9e, 0x42, 0x91, 0x4d, 0x09, 0x08, 0xbd, 0xb8,
	0x85, 0xea, 0x0f, 0x58, 0xa9, 0xd0, 0x4b, 0x95, 0x98, 0x8b, 0xa7, 0x92, 0xd4, 0x35, 0x06, 0x4c,
	0x37, 0x24, 0xaf, 0x87, 0x7e, 0x80, 0xf7, 0x7e, 0x56, 0x8f, 0x3d, 0x7a, 0x52, 0x49, 0xc0, 0xef,
	0x90, 0x6c, 0x5a, 0xd4, 0x9b, 0x7a, 0x7b, 0x33, 0xcc, 0xbc, 0x99, 0x41, 0x24, 0x99, 0x91, 0x48,
	0x52, 0x45, 0xaa, 0x7b, 0x1a, 0x46, 0xf4, 0xb8, 0x0c, 0xc4, 0x5c, 0xc5, 0x83, 0x50, 0x85, 0x6a,
	0xa0, 0xe9, 0x60, 0xf9, 0xa0, 0x91, 0x06, 0xfa, 0xda, 0xc9, 0xed, 0x50, 0xa9, 0xf0, 0x49, 0x7e,
	0xa9, 0x28, 0x8a, 0x65, 0x46, 0x7e, 0x9c, 0x54, 0x02, 0xe7, 0x03, 0xd0, 0xf4, 0x64, 0x46, 0xec,
	0x1c, 0x6b, 0x3e, 0x59, 0xd0, 0x83, 0x7e, 0x6b, 0xd8, 0x15, 0x95, 0x4d, 0xec, 0x6d, 0xc2, 0xdb,
	0xdb, 0x46, 0x87, 0x9b, 0x57, 0xdb, 0x58, 0xbf, 0xd9, 0xe0, 0xd6, 0x7c, 0x62, 0x1c, 0x4d, 0x5a,
	0x25, 0xd2, 0xaa, 0xf5, 0xa0, 0xdf, 0x1e, 0xa2, 0x28, 0x5f, 0x09, 0x6f, 0x95, 0x48, 0x57, 0xf3,
	0xec, 0x18, 0xeb, 0xd1, 0x62, 0x21, 0x53, 0xeb, 0x40, 0x3f, 0x6e, 0x88, 0x49, 0x89, 0xdc, 0x8a,
	0x64, 0x97, 0x88, 0xf3, 0x54, 0xfa, 0x24, 0xef, 0x67, 0x3e, 0x59, 0xe6, 0x1f, 0xb2, 0x9b, 0x3b,
	0xdf, 0x05, 0x39, 0x27, 0x68, 0x96, 0x81, 0xec, 0x08, 0x9b, 0xde, 0xdd, 0xcd, 0x78, 0x36, 0xbd,
	0x9e, 0x8e, 0x3b, 0x06, 0x6b, 0x23, 0x6a, 0x78, 0x35, 0x71, 0x6f, 0xbd, 0x0e, 0x38, 0xcf, 0x80,
	0x75, 0x1d, 0xfe, 0xcf, 0xa5, 0xf6, 0x8f, 0xa5, 0xad, 0x6a, 0xc8, 0xb7, 0xa9, 0xbf, 0xec, 0x31,
	0xb2, 0x36, 0x39, 0x87, 0x6d, 0xce, 0xe1, 0x3d, 0xe7, 0xb0, 0x2e, 0xb8, 0xb1, 0x2d, 0xb8, 0xf1,
	0x52, 0x70, 0x23, 0x68, 0xe8, 0x0e, 0x67, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x77, 0x37, 0x4b,
	0xa4, 0xef, 0x01, 0x00, 0x00,
}

func (m *Test) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Test) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTest(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.Inner != nil {
		{
			size, err := m.Inner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.At, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.At):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTest(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.At, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.At):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTest(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Test) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.At)
	n += 1 + l + sovTest(uint64(l))
	if m.Type != 0 {
		n += 1 + sovTest(uint64(m.Type))
	}
	if m.Inner != nil {
		l = m.Inner.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTest(uint64(l))
	return n
}

func (m *Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.At)
	n += 1 + l + sovTest(uint64(l))
	if m.Type != 0 {
		n += 1 + sovTest(uint64(m.Type))
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Test) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Test: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Test: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.At, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Test_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inner == nil {
				m.Inner = &Inner{}
			}
			if err := m.Inner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.At, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Inner_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
